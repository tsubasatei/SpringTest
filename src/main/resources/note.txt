1. Spring AOP

1) 加入 Maven 依赖
    spring-context：自动导入相关依赖 aop、beans、cores、expressions
    spring-aspects：自动导入相关依赖 aspectjweaver

2) 在配置文件中加入 aop 命名空间

3） 基于注解的方式：
    ①. 在配置文件中加入如下配置：
       <aop:aspectj-autoproxy/>

    ②. 把横切关注点的代码抽象到切面的类中
    i.  切面首先是一个 IOC 容器中的 bean，即加入 @Component 注解
    ii. 切面还需要加入 @Aspect 注解

    ③. 在切面类中声明各种通知：
    i.  声明一个方法
    ii. 在方法前加入 @Before 注解

    ④. 可以在通知方法中声明一个类型为 JoinPoint 的参数。然后就能访问链接细节，如方法名和参数值


2. Spring 整合 Hibernate 整合什么 ?

2.1
1). 有 IOC 容器来管理 Hibernate 的 SessionFactory
2). 让 Hibernate 使用上 Spring 的声明式事务

2.2 整合步骤:

1). 加入 hibernate
①. hibernate-core
②. 添加 hibernate 的配置文件: hibernate.cfg.xml
③. 编写了持久化类对应的 .hbm.xml 文件。

2). 加入 Spring
①. spring-orm
②. 加入 Spring 的配置文件

3). 整合.

2.3 编写代码


3. Spring 如何在 WEB 应用中使用 ?

3.1
1). 需要额外加入的 jar 包: spring-webmvc
2). Spring 的配置文件, 没有什么不同

3). 如何创建 IOC 容器 ?
    ①. 非 WEB 应用在 main 方法中直接创建
    ②. 应该在 WEB 应用被服务器加载时就创建 IOC 容器:
    在 ServletContextListener#contextInitialized(ServletContextEvent sce) 方法中创建 IOC 容器.

    ③. 在 WEB 应用的其他组件中如何来访问 IOC 容器呢 ?
    在 ServletContextListener#contextInitialized(ServletContextEvent sce) 方法中创建 IOC 容器后, 可以把其放在
    ServletContext(即 application 域)的一个属性中.

    ④. 实际上, Spring 配置文件的名字和位置应该也是可配置的! 将其配置到当前 WEB 应用的初始化参数中较为合适.

java.lang.ClassNotFoundException: org.springframework.context.support.ClassPathXmlApplicationContext
File > Project Structure > Artifacts > 在右侧Output Layout右击项目名，选择Put into Output Root
执行后，在WEB-INF在增加了lib目录，里面是项目引用的jar包，点击OK。

4). 在 WEB 环境下使用 Spring

①. 需要额外加入的 jar 包: spring-webmvc

②. Spring 的配置文件, 和非 WEB 环境没有什么不同

③. 需要在 web.xml 文件中加入如下配置:

<!-- 配置 Spring 配置文件的名称和位置 -->
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>classpath:applicationContext.xml</param-value>
</context-param>

<!-- 启动 IOC 容器的 ServletContextListener -->
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

3.2. Spring 如何整合 Struts2 ?

1). 整合目标 ? 使 IOC 容器来管理 Struts2 的 Action!

2). 如何进行整合 ?

①. 正常加入 Struts2

②. 在 Spring 的 IOC 容器中配置 Struts2 的 Action
注意: 在 IOC 容器中配置 Struts2 的 Action 时, 需要配置 scope 属性, 其值必须为 prototype

<bean id="personAction"
	class="com.atguigu.spring.struts2.actions.PersonAction"
	scope="prototype">
	<property name="personService" ref="personService"></property>
</bean>

③. 配置 Struts2 的配置文件: action 节点的 class 属性需要指向 IOC 容器中该 bean 的 id

<action name="person-save" class="personAction">
	<result>/success.jsp</result>
</action>

④. 加入 struts2-spring-plugin-2.3.15.3.jar

3). 整合原理: 通过添加 struts2-spring-plugin-2.3.15.3.jar 以后, Struts2 会先从 IOC 容器中
获取 Action 的实例.

if (appContext.containsBean(beanName)) {
    o = appContext.getBean(beanName);
} else {
    Class beanClazz = getClassInstance(beanName);
    o = buildBean(beanClazz, extraContext);
}